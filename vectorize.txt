Last login: Fri Nov 13 12:41:21 on ttys003
(base) client0162vag:~ weiqiuyou$ python
Python 3.7.3 (default, Mar 27 2019, 16:54:48)
[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> cur_indices = [1,3,2,5,4]
>>> import numpy as np
>>> pos_idx = 2
>>> boards_mat = np.randn((10,5))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'numpy' has no attribute 'randn'
>>> boards_mat = np.random.randn((10,5))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "mtrand.pyx", line 1425, in mtrand.RandomState.randn
  File "mtrand.pyx", line 1555, in mtrand.RandomState.standard_normal
  File "mtrand.pyx", line 167, in mtrand.cont0_array
TypeError: 'tuple' object cannot be interpreted as an integer
>>> boards_mat = np.random.rand((10,5))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "mtrand.pyx", line 1368, in mtrand.RandomState.rand
  File "mtrand.pyx", line 861, in mtrand.RandomState.random_sample
  File "mtrand.pyx", line 167, in mtrand.cont0_array
TypeError: 'tuple' object cannot be interpreted as an integer
>>> boards_mat = np.randint.rand((10,5))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'numpy' has no attribute 'randint'
>>> boards_mat = np.random.rand(10,5)
>>> boards_mat = np.random.randint(10,5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "mtrand.pyx", line 992, in mtrand.RandomState.randint
ValueError: Range cannot be empty (low >= high) unless no samples are taken
>>> boards_mat = np.random.rand(10,5)
>>> boards_mat
array([[0.23811612, 0.46998715, 0.2706577 , 0.74644459, 0.42760518],
       [0.32272441, 0.83892242, 0.26105362, 0.20233269, 0.71206277],
       [0.53640695, 0.96341328, 0.63529194, 0.86954142, 0.33123234],
       [0.50647534, 0.31143032, 0.94058927, 0.86388075, 0.88174984],
       [0.1640415 , 0.55847418, 0.84899084, 0.46635687, 0.20247233],
       [0.21450374, 0.68388313, 0.41030713, 0.09197471, 0.57470677],
       [0.8975643 , 0.96947949, 0.92114783, 0.69817297, 0.99240924],
       [0.01836087, 0.07417614, 0.11525473, 0.06238967, 0.18756325],
       [0.52595231, 0.59325755, 0.32511379, 0.76944003, 0.24154118],
       [0.38681583, 0.33314712, 0.53486172, 0.92058098, 0.70137288]])
>>> text_mat = np.random.rand(10,6)
>>> boards_mat = np.random.rand(10,4)
>>> cur_indices = np.array(cur_indices)
>>> boards_mat[cur_indices]
array([[0.487184  , 0.58402595, 0.60208719, 0.66167699],
       [0.11371784, 0.73762384, 0.89235207, 0.87566611],
       [0.74198859, 0.4596418 , 0.28428232, 0.18741958],
       [0.68072689, 0.95330642, 0.61962095, 0.25076317],
       [0.95943506, 0.26650908, 0.80528752, 0.29221581]])
>>> boards_mat[cur_indices].shape
(5, 4)
>>> np.concatenate(boards_mat[cur_indices], text_mat[cur_indices]).shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: only integer scalar arrays can be converted to a scalar index
>>> np.concatenate((boards_mat[cur_indices], text_mat[cur_indices])).shape
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: all the input array dimensions except for the concatenation axis must match exactly
>>> np.concatenate((boards_mat[cur_indices], text_mat[cur_indices]), axis=1).shape
(5, 10)
>>> y_cur = np.zeros(5)
>>> y_cur[pos_idx] = 1
>>> y_cur
array([0., 0., 1., 0., 0.])
>>> x_cur = np.concatenate((boards_mat[cur_indices], text_mat[cur_indices]), axis=1)
>>>
